swagger: "2.0"

info:
  description: "This application is part of a selective process at Dextra."

  version: "1.0.0"

  title: "Harry Potter Characters - Dextra Challenge"

host: "localhost:9090"

tags:
  - name: "Houses"
    description: "All the operations related to the houses."

  - name: "Characters"
    description: "All the operations related to characters."

schemes:
  - "http"

paths:
  /api/v1/characters:
    post:
      tags:
        - "Characters"
      summary: "Add a new character."
      operationId: "saveCharacter"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "data"
          description: "Character data"
          required: true
          schema:
            $ref: "#/definitions/AddCharacter"
      security:
        - Bearer: []
      responses:
        201:
          description: "Successfully created"
          schema:
            $ref: "#/definitions/Character"

        400:
          description: "Validation errors"

    get:
      tags:
        - "Characters"
      summary: "Get all Characters or based on some filter and return grouped by house"
      operationId: "findCharacters"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "house"
          type: "string"
          description: "Filter by house"
          required: false
        - in: "query"
          name: "name"
          type: "string"
          description: "Filter by character name"
          required: false
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/SearchResultList"
        400:
          description: "Something went wrong"
        404:
          description: "NOT_FOUND"

    put:
      tags:
        - "Characters"
      summary: "Update character"
      parameters:
        - in: body
          name: "data"
          schema:
            $ref: '#/definitions/Character'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Character'
        400:
          description: BAD_REQUEST
        404:
          description: NOT_FOUND

  /api/v1/characters/{id}:
    get:
      tags:
        - "Characters"
      summary: "Find character by its id"
      parameters:
        - in: path
          required: true
          name: "id"
          type: "string"
          description: "Id of the character"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SingleResult'
        404:
          description: "NOT_FOUND"

    delete:
      tags:
        - "Characters"
      summary: "Delete character based on its ID"
      parameters:
        - in: path
          required: true
          name: "id"
          type: "string"
          description: "Id of the character"
      responses:
        204:
          description: NO_CONTENT
        404:
          description: NOT_FOUND

  /api/v1/houses/{id}:
    get:
      tags:
        - "Houses"
      summary: "Get House By ID"
      parameters:
        - in: path
          required: true
          name: "id"
          type: "string"
          description: "Id of the house"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/House'

  /api/v1/houses:
    put:
      tags:
        - "Houses"
      summary: "Update all cached houses"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              sucess:
                type: "boolean"


  /users:
    post:
      tags:
        - "User"
      summary: "Create user"
      operationId: "store"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User created sucessfully"
          schema:
            $ref: "#/definitions/User"

        400:
          description: "This user already exists"

        500:
          description: "Creating user operation failed"

  /login:
    post:
      tags:
        - "User"
      summary: "Login user reserved for third party APIs"
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userInfo"
          in: "body"
          schema:
            $ref: "#/definitions/LoginObject"
          required: true
      responses:
        200:
          description: "successful login"
          schema:
            $ref: "#/definitions/LoginSuccessful"

        401:
          description: "User or Password does not match"

        500:
          description: "Login operation failed"

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

definitions:

  Character:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uuid"
      name:
        type: "string"
      role:
        type: "string"
        enum: [STUDENT, CLASS_LEADER, TEACHER]
      house:
        type: "string"
      patronus:
        type: "string"
    xml:
      name: "Character"

  House:
    type: "object"
    properties:
      _id:
        type: "string"
      name:
        type: "string"
      mascot:
        type: "string"
      headOfHouse:
        type: "string"
      houseGhost:
        type: "string"
      founder:
        type: "string"
      values:
        type: "array"
        items:
          type: "string"
      colors:
        type: "array"
        items:
          type: "string"
      updatedAt:
        type: "string"
    xml:
      name: "Character"

  AddCharacter:
    type: "object"
    properties:
      name:
        type: "string"
      role:
        type: "string"
        enum: [STUDENT, CLASS_LEADER, TEACHER]
      house:
        type: "string"
      patronus:
        type: "string"
    xml:
      name: "Character"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"

  LoginObject:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"

  LoginSuccessful:
    type: "object"
    properties:
      message:
        type: "string"
      token:
        type: "string"

  SingleResult:
    type: "object"
    properties:
      house:
        $ref: '#/definitions/House'
      character:
        $ref: "#/definitions/Character"

  SearchResult:
    type: "object"
    properties:
      house:
        $ref: '#/definitions/House'
      characters:
        type: "array"
        items:
          $ref: "#/definitions/Character"

  SearchResultList:
    type: "array"
    items:
      $ref: '#/definitions/SearchResult'
          
